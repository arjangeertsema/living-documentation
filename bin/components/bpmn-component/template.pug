div(id=id class='bpmn' data-fullscreen)

script.
  window.addEventListener('load', function() {
    const xml = '!{xml}';
    const bpmnViewer = new BpmnJS({
      container: '#{'#' + id}'
    });
    const bpmnCanvas = bpmnViewer.get('canvas');
    const zoomScroll = bpmnViewer.get('zoomScroll');
    const bpmnContainer = document.getElementById('#{id}');
    const fullscreenContainer = bpmnContainer.closest('[data-fullscreen]');
    const zoomButtons = fullscreenContainer.querySelectorAll('[data-figure-zoom]');

    zoomScroll.toggle(false);
    
    const drawCanvas = () => {
      bpmnViewer.importXML(xml)
        .then(() => {
          bpmnCanvas.zoom('fit-viewport', 'auto');

          const eventBus = bpmnViewer.get('eventBus');
          const menu = document.getElementById('menu-main');

          let anchor = null;
          let page = null;

          eventBus.on('element.hover', function(e) {
            if(!e.element?.businessObject?.name)
              return;

            const id = e.element.businessObject.name
              .trim()
              .toLowerCase()
              .replaceAll(' ', '-');

            anchor = document.getElementById(id);
            page = menu.querySelector(`a[href$="/${id}/index.html"], a[href="${id}/index.html"]`);

            if(anchor || page) {
              e.gfx.style.cursor = 'pointer';
            }
          });

          eventBus.on('element.out', function(e) {
            e.gfx.style.cursor = 'auto';
            anchor = null;
            page = null;
          });

          eventBus.on('element.click', function(e) {
            if(anchor) {
              anchor.click();
              anchor.scrollIntoView();
            }
            
            if(page) {
              window.location.href = page;
            }
          });
        })
        .catch(error => {
          console.error('Error rendering bpmn file: #{file}', error);
        });
    }

    const handleZoom = event => {
      const z = bpmnCanvas.zoom();

      switch (event.currentTarget.dataset.figureZoom) {
        case 'in':
          bpmnCanvas.zoom(z + .5, 'auto');
          break;

        case 'out':
          bpmnCanvas.zoom(z - .5, 'auto');
          break;

        default:
          bpmnCanvas.zoom('fit-viewport', 'auto');
      }
    }

    drawCanvas();

    fullscreenContainer.setAttribute('data-fullscreen-zoom', true);

    fullscreenContainer.addEventListener('openfullscreen', () => {
      bpmnCanvas.zoom('fit-viewport', 'auto');
      setTimeout(() => {
        bpmnCanvas.zoom('fit-viewport', 'auto');
      }, 1);
      zoomScroll.toggle();

    });

    fullscreenContainer.addEventListener('closefullscreen', () => {
      bpmnCanvas.zoom('fit-viewport', 'auto');
      setTimeout(() => {
        bpmnCanvas.zoom('fit-viewport', 'auto');
      }, 1);
      zoomScroll.toggle();
    });

    zoomButtons.forEach(button => {
      button.addEventListener('click', handleZoom);
    });

    window.addEventListener('resize', () => {
      if(bpmnCanvas) {
        bpmnCanvas.zoom('fit-viewport', 'auto');
        setTimeout(() => {
          bpmnCanvas.zoom('fit-viewport', 'auto');
        }, 1);
      }
    });
  });
