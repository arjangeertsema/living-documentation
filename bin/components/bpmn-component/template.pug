div(id=id class='bpmn' data-fullscreen)

script.
  window.addEventListener('load', function() {
    const xml = '!{xml}';
    const bpmnViewer = new BpmnJS({
      container: '#{'#' + id}'
    });
    const bpmnCanvas = bpmnViewer.get('canvas');
    const bpmnContainer = document.getElementById('#{id}');
    const fullscreenContainer = bpmnContainer.closest('[data-fullscreen]');
    const zoomButtons = fullscreenContainer.querySelectorAll('[data-figure-zoom]');

    const drawCanvas = () => {
      bpmnViewer.importXML(xml)
        .then(() => {
          bpmnCanvas.zoom('fit-viewport', 'auto');
        })
        .catch(error => {
          console.error('Error rendering bpmn file: #{file}', error);
        });
    }

    const handleZoom = event => {
      const z = bpmnCanvas.zoom();

      switch (event.currentTarget.dataset.figureZoom) {
        case 'in':
          bpmnCanvas.zoom(z + .5, 'auto');
          break;

        case 'out':
          bpmnCanvas.zoom(z - .5, 'auto');
          break;

        default:
          bpmnCanvas.zoom('fit-viewport', 'auto');
      }
    }

    drawCanvas();

    fullscreenContainer.setAttribute('data-fullscreen-zoom', true);

    fullscreenContainer.addEventListener('openfullscreen', () => {
      bpmnCanvas.zoom('fit-viewport', 'auto');
      bpmnCanvas.zoom('fit-viewport', 'auto');
    });

    fullscreenContainer.addEventListener('closefullscreen', () => {
      bpmnCanvas.zoom('fit-viewport', 'auto');
      bpmnCanvas.zoom('fit-viewport', 'auto');
    });

    zoomButtons.forEach(button => {
      button.addEventListener('click', handleZoom);
    });
  });
